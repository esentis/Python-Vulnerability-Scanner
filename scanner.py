#!/usr/bin/env python
import requests
import re
from urllib.parse import urljoin
from bs4 import BeautifulSoup


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


# Scanner class that contains all our scanning logic


class Scanner:
    # scanner constructor
    def __init__(self, url, ignore_links):
        self.session = requests.Session()
        self.target_url = url
        self.target_links = []
        self.links_to_ignore = ignore_links

    def get_html(self, url):
        try:
            response = self.session.get(url)
            parsed_html = BeautifulSoup(
                response.content, features="html.parser")

        except requests.exceptions.ConnectionError:
            pass
        return parsed_html

    def get_inputs(self, url):
        parsed_html = self.get_html(url)
        inputs_list = parsed_html.find_all("input")
        return inputs_list

    def get_forms(self, url):
        parsed_html = self.get_html(url)
        forms_list = parsed_html.find_all("form")
        return forms_list

    def extract_links(self, url):
        try:
            response = requests.get(url)
        except requests.exceptions.ConnectionError:
            pass
        # Regular Expression to bring us only the links
        # We decode to utf-8 to parse HTML
        return re.findall('(?:href=")(.*?)"', response.content.decode('utf-8'))

    # A method to grab all the links from a URL
    def crawl(self, url):
        href_links = self.extract_links(url)

        # We iterate all the links to take what we want
        for link in href_links:
            # We grab only links coming from our target's website
            link = urljoin(url, link)

            # If link is just a #, we ignore it
            if "#" in link:
                # continue means we go back to start of for loop
                # and we don't save the link
                continue
            if link.find("irc") is not -1:
                continue
            # If the link is not in our links list, we add it
            if link not in self.target_links and link not in self.links_to_ignore:
                print(link)
                self.target_links.append(link)

    def submit_form(self, form, value, url):
        action = form.get("action")
        post_url = urljoin(url, action)
        method = form.get("method")
        inputs_list = form.findAll("input")
        post_data = {}
        for input in inputs_list:
            print("\n")
            input_name = input.get("name")
            print(bcolors.BOLD+"Input name : "+str(input_name))
            input_type = input.get("type")
            print(bcolors.BOLD + "Input type : " + str(input_type))
            input_value = input.get("value")
            print(bcolors.BOLD + "Input value : " + str(input_value))
            if input_type == "text":
                input_value = value

            post_data[input_name] = input_value
        if method == "post":
            print("Method is POST\nUrl is "+post_url)
            response = self.session.post(post_url, data=post_data)
            print("\nPOST responded with " + str(response))
            print("\n")
            return response
        else:
            print("Method is GET\nUrl is " + post_url)
            print("\n")
            response = self.session.get(post_url, params=post_data)
            print("\nGET responded with " + str(response))
            return response

    def run_scanner(self):
        for link in self.target_links:
            forms = self.get_forms(link)
            for form in forms:
                print("\n[=] Testing form in "+link+"\n")
                is_vuln_to_xss_form = self.xss_form(form, link)
                if is_vuln_to_xss_form:
                    print(bcolors.HEADER+bcolors.WARNING +
                          "\n[****] XSS Discovered in "+link+" in the following form\n")
                    print(form)
            # If link has = means it possibly sends data to server ?id=
            if "=" in link:
                print("[\n+] Testing "+link+"\n")
                is_vuln_to_xss_link = self.xss_link(link)
                if is_vuln_to_xss_link:
                    print(bcolors.FAIL +
                          "\n[****]Possible XSS Discovered in "+link+"\n")

    def xss_form(self, form, url):
        xss_script = "<sCRipt>alert('XSS')</SCript>"
        response = self.submit_form(form, xss_script, url)
        # if the alert is present to the new html, that means the injection was successful!
        return xss_script in response.content.decode('utf-8')

    def xss_link(self, url):
        xss_script = "<sCRipt>alert('XSS')</SCript>"
        url = url.replace("=", "="+xss_script)
        response = self.session.get(url)
        return xss_script in response.content.decode('utf-8')

    def sqli_injection_form(self, form, url):
        sqli_injection_script = "' or '1=1"
        response = self.submit_form(form, sqli_injection_script, url)
        # if the alert is present to the new html, that means the injection was successful!
        return sqli_injection_script in response.content.decode('utf-8')
